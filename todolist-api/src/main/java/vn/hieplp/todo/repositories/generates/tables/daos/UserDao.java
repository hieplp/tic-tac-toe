/*
 * This file is generated by jOOQ.
 */
package vn.hieplp.todo.repositories.generates.tables.daos;


import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import vn.hieplp.todo.repositories.generates.tables.User;
import vn.hieplp.todo.repositories.generates.tables.records.UserRecord;

import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UserDao extends DAOImpl<UserRecord, vn.hieplp.todo.repositories.generates.tables.pojos.User, String> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(User.USER, vn.hieplp.todo.repositories.generates.tables.pojos.User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(User.USER, vn.hieplp.todo.repositories.generates.tables.pojos.User.class, configuration);
    }

    @Override
    public String getId(vn.hieplp.todo.repositories.generates.tables.pojos.User object) {
        return object.getUserid();
    }

    /**
     * Fetch records that have <code>userId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.User> fetchRangeOfUserid(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.USERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userId IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.User> fetchByUserid(String... values) {
        return fetch(User.USER.USERID, values);
    }

    /**
     * Fetch a unique record that has <code>userId = value</code>
     */
    public vn.hieplp.todo.repositories.generates.tables.pojos.User fetchOneByUserid(String value) {
        return fetchOne(User.USER.USERID, value);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.User> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.User> fetchByEmail(String... values) {
        return fetch(User.USER.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public vn.hieplp.todo.repositories.generates.tables.pojos.User fetchOneByEmail(String value) {
        return fetchOne(User.USER.EMAIL, value);
    }

    /**
     * Fetch records that have <code>fullName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.User> fetchRangeOfFullname(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.FULLNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fullName IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.User> fetchByFullname(String... values) {
        return fetch(User.USER.FULLNAME, values);
    }

    /**
     * Fetch records that have <code>userStatus BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.User> fetchRangeOfUserstatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(User.USER.USERSTATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userStatus IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.User> fetchByUserstatus(Integer... values) {
        return fetch(User.USER.USERSTATUS, values);
    }
}
