/*
 * This file is generated by jOOQ.
 */
package vn.hieplp.todo.repositories.generates.tables.daos;


import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import vn.hieplp.todo.repositories.generates.tables.Note;
import vn.hieplp.todo.repositories.generates.tables.records.NoteRecord;

import java.time.LocalDateTime;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class NoteDao extends DAOImpl<NoteRecord, vn.hieplp.todo.repositories.generates.tables.pojos.Note, String> {

    /**
     * Create a new NoteDao without any configuration
     */
    public NoteDao() {
        super(Note.NOTE, vn.hieplp.todo.repositories.generates.tables.pojos.Note.class);
    }

    /**
     * Create a new NoteDao with an attached configuration
     */
    public NoteDao(Configuration configuration) {
        super(Note.NOTE, vn.hieplp.todo.repositories.generates.tables.pojos.Note.class, configuration);
    }

    @Override
    public String getId(vn.hieplp.todo.repositories.generates.tables.pojos.Note object) {
        return object.getNoteid();
    }

    /**
     * Fetch records that have <code>noteId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchRangeOfNoteid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Note.NOTE.NOTEID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>noteId IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchByNoteid(String... values) {
        return fetch(Note.NOTE.NOTEID, values);
    }

    /**
     * Fetch a unique record that has <code>noteId = value</code>
     */
    public vn.hieplp.todo.repositories.generates.tables.pojos.Note fetchOneByNoteid(String value) {
        return fetchOne(Note.NOTE.NOTEID, value);
    }

    /**
     * Fetch records that have <code>noteTitle BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchRangeOfNotetitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Note.NOTE.NOTETITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>noteTitle IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchByNotetitle(String... values) {
        return fetch(Note.NOTE.NOTETITLE, values);
    }

    /**
     * Fetch records that have <code>noteDescription BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchRangeOfNotedescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Note.NOTE.NOTEDESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>noteDescription IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchByNotedescription(String... values) {
        return fetch(Note.NOTE.NOTEDESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>noteStatus BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchRangeOfNotestatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Note.NOTE.NOTESTATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>noteStatus IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchByNotestatus(Integer... values) {
        return fetch(Note.NOTE.NOTESTATUS, values);
    }

    /**
     * Fetch records that have <code>userId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchRangeOfUserid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Note.NOTE.USERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userId IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchByUserid(String... values) {
        return fetch(Note.NOTE.USERID, values);
    }

    /**
     * Fetch records that have <code>createdBy BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchRangeOfCreatedby(String lowerInclusive, String upperInclusive) {
        return fetchRange(Note.NOTE.CREATEDBY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createdBy IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchByCreatedby(String... values) {
        return fetch(Note.NOTE.CREATEDBY, values);
    }

    /**
     * Fetch records that have <code>createdAt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchRangeOfCreatedat(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Note.NOTE.CREATEDAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createdAt IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchByCreatedat(LocalDateTime... values) {
        return fetch(Note.NOTE.CREATEDAT, values);
    }

    /**
     * Fetch records that have <code>modifiedBy BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchRangeOfModifiedby(String lowerInclusive, String upperInclusive) {
        return fetchRange(Note.NOTE.MODIFIEDBY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modifiedBy IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchByModifiedby(String... values) {
        return fetch(Note.NOTE.MODIFIEDBY, values);
    }

    /**
     * Fetch records that have <code>modifiedAt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchRangeOfModifiedat(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Note.NOTE.MODIFIEDAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modifiedAt IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchByModifiedat(LocalDateTime... values) {
        return fetch(Note.NOTE.MODIFIEDAT, values);
    }

    /**
     * Fetch records that have <code>isPinned BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchRangeOfIspinned(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Note.NOTE.ISPINNED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isPinned IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Note> fetchByIspinned(Integer... values) {
        return fetch(Note.NOTE.ISPINNED, values);
    }
}
