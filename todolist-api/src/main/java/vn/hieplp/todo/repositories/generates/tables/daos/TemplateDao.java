/*
 * This file is generated by jOOQ.
 */
package vn.hieplp.todo.repositories.generates.tables.daos;


import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import vn.hieplp.todo.repositories.generates.tables.Template;
import vn.hieplp.todo.repositories.generates.tables.records.TemplateRecord;

import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TemplateDao extends DAOImpl<TemplateRecord, vn.hieplp.todo.repositories.generates.tables.pojos.Template, Record2<String, Integer>> {

    /**
     * Create a new TemplateDao without any configuration
     */
    public TemplateDao() {
        super(Template.TEMPLATE, vn.hieplp.todo.repositories.generates.tables.pojos.Template.class);
    }

    /**
     * Create a new TemplateDao with an attached configuration
     */
    public TemplateDao(Configuration configuration) {
        super(Template.TEMPLATE, vn.hieplp.todo.repositories.generates.tables.pojos.Template.class, configuration);
    }

    @Override
    public Record2<String, Integer> getId(vn.hieplp.todo.repositories.generates.tables.pojos.Template object) {
        return compositeKeyRecord(object.getTemplatename(), object.getSendvia());
    }

    /**
     * Fetch records that have <code>templateName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Template> fetchRangeOfTemplatename(String lowerInclusive, String upperInclusive) {
        return fetchRange(Template.TEMPLATE.TEMPLATENAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>templateName IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Template> fetchByTemplatename(String... values) {
        return fetch(Template.TEMPLATE.TEMPLATENAME, values);
    }

    /**
     * Fetch records that have <code>sendVia BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Template> fetchRangeOfSendvia(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Template.TEMPLATE.SENDVIA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sendVia IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Template> fetchBySendvia(Integer... values) {
        return fetch(Template.TEMPLATE.SENDVIA, values);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Template> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Template.TEMPLATE.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Template> fetchByTitle(String... values) {
        return fetch(Template.TEMPLATE.TITLE, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Template> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(Template.TEMPLATE.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<vn.hieplp.todo.repositories.generates.tables.pojos.Template> fetchByContent(String... values) {
        return fetch(Template.TEMPLATE.CONTENT, values);
    }
}
