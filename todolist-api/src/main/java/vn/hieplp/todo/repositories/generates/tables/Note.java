/*
 * This file is generated by jOOQ.
 */
package vn.hieplp.todo.repositories.generates.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vn.hieplp.todo.repositories.generates.Keys;
import vn.hieplp.todo.repositories.generates.Todo;
import vn.hieplp.todo.repositories.generates.tables.records.NoteRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Note extends TableImpl<NoteRecord> {

    /**
     * The reference instance of <code>todo.note</code>
     */
    public static final Note NOTE = new Note();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>todo.note.noteId</code>.
     */
    public final TableField<NoteRecord, String> NOTEID = createField(DSL.name("noteId"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>todo.note.noteTitle</code>.
     */
    public final TableField<NoteRecord, String> NOTETITLE = createField(DSL.name("noteTitle"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>todo.note.noteDescription</code>.
     */
    public final TableField<NoteRecord, String> NOTEDESCRIPTION = createField(DSL.name("noteDescription"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>todo.note.noteStatus</code>.
     */
    public final TableField<NoteRecord, Integer> NOTESTATUS = createField(DSL.name("noteStatus"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");
    /**
     * The column <code>todo.note.userId</code>.
     */
    public final TableField<NoteRecord, String> USERID = createField(DSL.name("userId"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>todo.note.createdBy</code>.
     */
    public final TableField<NoteRecord, String> CREATEDBY = createField(DSL.name("createdBy"), SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>todo.note.createdAt</code>.
     */
    public final TableField<NoteRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>todo.note.modifiedBy</code>.
     */
    public final TableField<NoteRecord, String> MODIFIEDBY = createField(DSL.name("modifiedBy"), SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>todo.note.modifiedAt</code>.
     */
    public final TableField<NoteRecord, LocalDateTime> MODIFIEDAT = createField(DSL.name("modifiedAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>todo.note.isPinned</code>.
     */
    public final TableField<NoteRecord, Integer> ISPINNED = createField(DSL.name("isPinned"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private Note(Name alias, Table<NoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Note(Name alias, Table<NoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>todo.note</code> table reference
     */
    public Note(String alias) {
        this(DSL.name(alias), NOTE);
    }

    /**
     * Create an aliased <code>todo.note</code> table reference
     */
    public Note(Name alias) {
        this(alias, NOTE);
    }

    /**
     * Create a <code>todo.note</code> table reference
     */
    public Note() {
        this(DSL.name("note"), null);
    }

    public <O extends Record> Note(Table<O> child, ForeignKey<O, NoteRecord> key) {
        super(child, key, NOTE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoteRecord> getRecordType() {
        return NoteRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Todo.TODO;
    }

    @Override
    public UniqueKey<NoteRecord> getPrimaryKey() {
        return Keys.KEY_NOTE_PRIMARY;
    }

    @Override
    public List<UniqueKey<NoteRecord>> getKeys() {
        return Arrays.<UniqueKey<NoteRecord>>asList(Keys.KEY_NOTE_PRIMARY);
    }

    @Override
    public Note as(String alias) {
        return new Note(DSL.name(alias), this);
    }

    @Override
    public Note as(Name alias) {
        return new Note(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Note rename(String name) {
        return new Note(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Note rename(Name name) {
        return new Note(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, Integer, String, String, LocalDateTime, String, LocalDateTime, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
