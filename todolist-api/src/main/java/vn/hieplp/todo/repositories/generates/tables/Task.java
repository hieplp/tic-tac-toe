/*
 * This file is generated by jOOQ.
 */
package vn.hieplp.todo.repositories.generates.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vn.hieplp.todo.repositories.generates.Keys;
import vn.hieplp.todo.repositories.generates.Todo;
import vn.hieplp.todo.repositories.generates.tables.records.TaskRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Task extends TableImpl<TaskRecord> {

    /**
     * The reference instance of <code>todo.task</code>
     */
    public static final Task TASK = new Task();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>todo.task.taskId</code>.
     */
    public final TableField<TaskRecord, String> TASKID = createField(DSL.name("taskId"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>todo.task.userId</code>.
     */
    public final TableField<TaskRecord, String> USERID = createField(DSL.name("userId"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>todo.task.taskTitle</code>.
     */
    public final TableField<TaskRecord, String> TASKTITLE = createField(DSL.name("taskTitle"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>todo.task.taskDescription</code>.
     */
    public final TableField<TaskRecord, String> TASKDESCRIPTION = createField(DSL.name("taskDescription"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>todo.task.taskDate</code>.
     */
    public final TableField<TaskRecord, LocalDateTime> TASKDATE = createField(DSL.name("taskDate"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>todo.task.taskImages</code>.
     */
    public final TableField<TaskRecord, String> TASKIMAGES = createField(DSL.name("taskImages"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>todo.task.taskStatus</code>.
     */
    public final TableField<TaskRecord, Integer> TASKSTATUS = createField(DSL.name("taskStatus"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");
    /**
     * The column <code>todo.task.createdBy</code>.
     */
    public final TableField<TaskRecord, String> CREATEDBY = createField(DSL.name("createdBy"), SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>todo.task.createdAt</code>.
     */
    public final TableField<TaskRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>todo.task.modifiedBy</code>.
     */
    public final TableField<TaskRecord, String> MODIFIEDBY = createField(DSL.name("modifiedBy"), SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>todo.task.modifiedAt</code>.
     */
    public final TableField<TaskRecord, LocalDateTime> MODIFIEDAT = createField(DSL.name("modifiedAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Task(Name alias, Table<TaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private Task(Name alias, Table<TaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>todo.task</code> table reference
     */
    public Task(String alias) {
        this(DSL.name(alias), TASK);
    }

    /**
     * Create an aliased <code>todo.task</code> table reference
     */
    public Task(Name alias) {
        this(alias, TASK);
    }

    /**
     * Create a <code>todo.task</code> table reference
     */
    public Task() {
        this(DSL.name("task"), null);
    }

    public <O extends Record> Task(Table<O> child, ForeignKey<O, TaskRecord> key) {
        super(child, key, TASK);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskRecord> getRecordType() {
        return TaskRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Todo.TODO;
    }

    @Override
    public UniqueKey<TaskRecord> getPrimaryKey() {
        return Keys.KEY_TASK_PRIMARY;
    }

    @Override
    public List<UniqueKey<TaskRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskRecord>>asList(Keys.KEY_TASK_PRIMARY);
    }

    @Override
    public Task as(String alias) {
        return new Task(DSL.name(alias), this);
    }

    @Override
    public Task as(Name alias) {
        return new Task(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(String name) {
        return new Task(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Name name) {
        return new Task(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, String, String, LocalDateTime, String, Integer, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
