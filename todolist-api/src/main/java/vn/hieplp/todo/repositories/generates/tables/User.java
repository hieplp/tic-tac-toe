/*
 * This file is generated by jOOQ.
 */
package vn.hieplp.todo.repositories.generates.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vn.hieplp.todo.repositories.generates.Keys;
import vn.hieplp.todo.repositories.generates.Todo;
import vn.hieplp.todo.repositories.generates.tables.records.UserRecord;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class User extends TableImpl<UserRecord> {

    /**
     * The reference instance of <code>todo.user</code>
     */
    public static final User USER = new User();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>todo.user.userId</code>.
     */
    public final TableField<UserRecord, String> USERID = createField(DSL.name("userId"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>todo.user.email</code>.
     */
    public final TableField<UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>todo.user.fullName</code>.
     */
    public final TableField<UserRecord, String> FULLNAME = createField(DSL.name("fullName"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>todo.user.userStatus</code>.
     */
    public final TableField<UserRecord, Integer> USERSTATUS = createField(DSL.name("userStatus"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>todo.user</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>todo.user</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>todo.user</code> table reference
     */
    public User() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Todo.TODO;
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.KEY_USER_PRIMARY, Keys.KEY_USER_USER_EMAIL_UINDEX);
    }

    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
