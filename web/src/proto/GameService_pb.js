// source: GameService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function () {
    return this || window || global || self || Function('return this')();
}).call(null);

goog.exportSymbol('proto.tictactoe.CreateGameRequest', null, global);
goog.exportSymbol('proto.tictactoe.GameItemList', null, global);
goog.exportSymbol('proto.tictactoe.GameItemModel', null, global);
goog.exportSymbol('proto.tictactoe.GameModel', null, global);
goog.exportSymbol('proto.tictactoe.GameRequest', null, global);
goog.exportSymbol('proto.tictactoe.JoinGameRequest', null, global);
goog.exportSymbol('proto.tictactoe.PlayGameRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.GameModel = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.GameModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.tictactoe.GameModel.displayName = 'proto.tictactoe.GameModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.GameItemList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.tictactoe.GameItemList.repeatedFields_, null);
};
goog.inherits(proto.tictactoe.GameItemList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.tictactoe.GameItemList.displayName = 'proto.tictactoe.GameItemList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.GameItemModel = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.GameItemModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.tictactoe.GameItemModel.displayName = 'proto.tictactoe.GameItemModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.CreateGameRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.CreateGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.tictactoe.CreateGameRequest.displayName = 'proto.tictactoe.CreateGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.JoinGameRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.JoinGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.tictactoe.JoinGameRequest.displayName = 'proto.tictactoe.JoinGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.PlayGameRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.PlayGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.tictactoe.PlayGameRequest.displayName = 'proto.tictactoe.PlayGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.GameRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.GameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.tictactoe.GameRequest.displayName = 'proto.tictactoe.GameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.tictactoe.GameModel.prototype.toObject = function (opt_includeInstance) {
        return proto.tictactoe.GameModel.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.tictactoe.GameModel} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.tictactoe.GameModel.toObject = function (includeInstance, msg) {
        var f, obj = {
            gameid: jspb.Message.getFieldWithDefault(msg, 1, ""),
            ownerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
            opponentid: jspb.Message.getFieldWithDefault(msg, 3, ""),
            gameturn: jspb.Message.getFieldWithDefault(msg, 4, 0),
            gamestatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
            gameitemsMap: (f = msg.getGameitemsMap()) ? f.toObject(includeInstance, proto.tictactoe.GameItemList.toObject) : [],
            winnerid: jspb.Message.getFieldWithDefault(msg, 7, ""),
            ownername: jspb.Message.getFieldWithDefault(msg, 8, ""),
            opponentname: jspb.Message.getFieldWithDefault(msg, 9, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.GameModel}
 */
proto.tictactoe.GameModel.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tictactoe.GameModel;
    return proto.tictactoe.GameModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.GameModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.GameModel}
 */
proto.tictactoe.GameModel.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setGameid(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setOwnerid(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setOpponentid(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGameturn(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGamestatus(value);
                break;
            case 6:
                var value = msg.getGameitemsMap();
                reader.readMessage(value, function (message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.tictactoe.GameItemList.deserializeBinaryFromReader, 0, new proto.tictactoe.GameItemList());
                });
                break;
            case 7:
                var value = /** @type {string} */ (reader.readString());
                msg.setWinnerid(value);
                break;
            case 8:
                var value = /** @type {string} */ (reader.readString());
                msg.setOwnername(value);
                break;
            case 9:
                var value = /** @type {string} */ (reader.readString());
                msg.setOpponentname(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.GameModel.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.tictactoe.GameModel.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.GameModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.GameModel.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getGameid();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getOwnerid();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getOpponentid();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = message.getGameturn();
    if (f !== 0) {
        writer.writeInt32(
            4,
            f
        );
    }
    f = message.getGamestatus();
    if (f !== 0) {
        writer.writeInt32(
            5,
            f
        );
    }
    f = message.getGameitemsMap(true);
    if (f && f.getLength() > 0) {
        f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.tictactoe.GameItemList.serializeBinaryToWriter);
    }
    f = message.getWinnerid();
    if (f.length > 0) {
        writer.writeString(
            7,
            f
        );
    }
    f = message.getOwnername();
    if (f.length > 0) {
        writer.writeString(
            8,
            f
        );
    }
    f = message.getOpponentname();
    if (f.length > 0) {
        writer.writeString(
            9,
            f
        );
    }
};


/**
 * optional string gameId = 1;
 * @return {string}
 */
proto.tictactoe.GameModel.prototype.getGameid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.GameModel} returns this
 */
proto.tictactoe.GameModel.prototype.setGameid = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ownerId = 2;
 * @return {string}
 */
proto.tictactoe.GameModel.prototype.getOwnerid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.GameModel} returns this
 */
proto.tictactoe.GameModel.prototype.setOwnerid = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string opponentId = 3;
 * @return {string}
 */
proto.tictactoe.GameModel.prototype.getOpponentid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.GameModel} returns this
 */
proto.tictactoe.GameModel.prototype.setOpponentid = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 gameTurn = 4;
 * @return {number}
 */
proto.tictactoe.GameModel.prototype.getGameturn = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.GameModel} returns this
 */
proto.tictactoe.GameModel.prototype.setGameturn = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 gameStatus = 5;
 * @return {number}
 */
proto.tictactoe.GameModel.prototype.getGamestatus = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.GameModel} returns this
 */
proto.tictactoe.GameModel.prototype.setGamestatus = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * map<int32, GameItemList> gameItems = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.tictactoe.GameItemList>}
 */
proto.tictactoe.GameModel.prototype.getGameitemsMap = function (opt_noLazyCreate) {
    return /** @type {!jspb.Map<number,!proto.tictactoe.GameItemList>} */ (
        jspb.Message.getMapField(this, 6, opt_noLazyCreate,
            proto.tictactoe.GameItemList));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tictactoe.GameModel} returns this
 */
proto.tictactoe.GameModel.prototype.clearGameitemsMap = function () {
    this.getGameitemsMap().clear();
    return this;
};


/**
 * optional string winnerId = 7;
 * @return {string}
 */
proto.tictactoe.GameModel.prototype.getWinnerid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.GameModel} returns this
 */
proto.tictactoe.GameModel.prototype.setWinnerid = function (value) {
    return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string ownerName = 8;
 * @return {string}
 */
proto.tictactoe.GameModel.prototype.getOwnername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.GameModel} returns this
 */
proto.tictactoe.GameModel.prototype.setOwnername = function (value) {
    return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string opponentName = 9;
 * @return {string}
 */
proto.tictactoe.GameModel.prototype.getOpponentname = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.GameModel} returns this
 */
proto.tictactoe.GameModel.prototype.setOpponentname = function (value) {
    return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tictactoe.GameItemList.repeatedFields_ = [1];


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.tictactoe.GameItemList.prototype.toObject = function (opt_includeInstance) {
        return proto.tictactoe.GameItemList.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.tictactoe.GameItemList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.tictactoe.GameItemList.toObject = function (includeInstance, msg) {
        var f, obj = {
            itemsList: jspb.Message.toObjectList(msg.getItemsList(),
                proto.tictactoe.GameItemModel.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.GameItemList}
 */
proto.tictactoe.GameItemList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tictactoe.GameItemList;
    return proto.tictactoe.GameItemList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.GameItemList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.GameItemList}
 */
proto.tictactoe.GameItemList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.tictactoe.GameItemModel;
                reader.readMessage(value, proto.tictactoe.GameItemModel.deserializeBinaryFromReader);
                msg.addItems(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.GameItemList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.tictactoe.GameItemList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.GameItemList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.GameItemList.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getItemsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.tictactoe.GameItemModel.serializeBinaryToWriter
        );
    }
};


/**
 * repeated GameItemModel items = 1;
 * @return {!Array<!proto.tictactoe.GameItemModel>}
 */
proto.tictactoe.GameItemList.prototype.getItemsList = function () {
    return /** @type{!Array<!proto.tictactoe.GameItemModel>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.tictactoe.GameItemModel, 1));
};


/**
 * @param {!Array<!proto.tictactoe.GameItemModel>} value
 * @return {!proto.tictactoe.GameItemList} returns this
 */
proto.tictactoe.GameItemList.prototype.setItemsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tictactoe.GameItemModel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tictactoe.GameItemModel}
 */
proto.tictactoe.GameItemList.prototype.addItems = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tictactoe.GameItemModel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tictactoe.GameItemList} returns this
 */
proto.tictactoe.GameItemList.prototype.clearItemsList = function () {
    return this.setItemsList([]);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.tictactoe.GameItemModel.prototype.toObject = function (opt_includeInstance) {
        return proto.tictactoe.GameItemModel.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.tictactoe.GameItemModel} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.tictactoe.GameItemModel.toObject = function (includeInstance, msg) {
        var f, obj = {
            itemid: jspb.Message.getFieldWithDefault(msg, 1, 0),
            itemtype: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.GameItemModel}
 */
proto.tictactoe.GameItemModel.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tictactoe.GameItemModel;
    return proto.tictactoe.GameItemModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.GameItemModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.GameItemModel}
 */
proto.tictactoe.GameItemModel.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setItemid(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setItemtype(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.GameItemModel.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.tictactoe.GameItemModel.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.GameItemModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.GameItemModel.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getItemid();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getItemtype();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
};


/**
 * optional int32 itemId = 1;
 * @return {number}
 */
proto.tictactoe.GameItemModel.prototype.getItemid = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.GameItemModel} returns this
 */
proto.tictactoe.GameItemModel.prototype.setItemid = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 itemType = 2;
 * @return {number}
 */
proto.tictactoe.GameItemModel.prototype.getItemtype = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.GameItemModel} returns this
 */
proto.tictactoe.GameItemModel.prototype.setItemtype = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.tictactoe.CreateGameRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.tictactoe.CreateGameRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.tictactoe.CreateGameRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.tictactoe.CreateGameRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.CreateGameRequest}
 */
proto.tictactoe.CreateGameRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tictactoe.CreateGameRequest;
    return proto.tictactoe.CreateGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.CreateGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.CreateGameRequest}
 */
proto.tictactoe.CreateGameRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.CreateGameRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.tictactoe.CreateGameRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.CreateGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.CreateGameRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.tictactoe.JoinGameRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.tictactoe.JoinGameRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.tictactoe.JoinGameRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.tictactoe.JoinGameRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            gameid: jspb.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.JoinGameRequest}
 */
proto.tictactoe.JoinGameRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tictactoe.JoinGameRequest;
    return proto.tictactoe.JoinGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.JoinGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.JoinGameRequest}
 */
proto.tictactoe.JoinGameRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setGameid(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.JoinGameRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.tictactoe.JoinGameRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.JoinGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.JoinGameRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getGameid();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
};


/**
 * optional string gameId = 1;
 * @return {string}
 */
proto.tictactoe.JoinGameRequest.prototype.getGameid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.JoinGameRequest} returns this
 */
proto.tictactoe.JoinGameRequest.prototype.setGameid = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.tictactoe.PlayGameRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.tictactoe.PlayGameRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.tictactoe.PlayGameRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.tictactoe.PlayGameRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            gameid: jspb.Message.getFieldWithDefault(msg, 1, ""),
            rowindex: jspb.Message.getFieldWithDefault(msg, 2, 0),
            colindex: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.PlayGameRequest}
 */
proto.tictactoe.PlayGameRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tictactoe.PlayGameRequest;
    return proto.tictactoe.PlayGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.PlayGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.PlayGameRequest}
 */
proto.tictactoe.PlayGameRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setGameid(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setRowindex(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setColindex(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.PlayGameRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.tictactoe.PlayGameRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.PlayGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.PlayGameRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getGameid();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getRowindex();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
    f = message.getColindex();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
};


/**
 * optional string gameId = 1;
 * @return {string}
 */
proto.tictactoe.PlayGameRequest.prototype.getGameid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.PlayGameRequest} returns this
 */
proto.tictactoe.PlayGameRequest.prototype.setGameid = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 rowIndex = 2;
 * @return {number}
 */
proto.tictactoe.PlayGameRequest.prototype.getRowindex = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.PlayGameRequest} returns this
 */
proto.tictactoe.PlayGameRequest.prototype.setRowindex = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 colIndex = 3;
 * @return {number}
 */
proto.tictactoe.PlayGameRequest.prototype.getColindex = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.PlayGameRequest} returns this
 */
proto.tictactoe.PlayGameRequest.prototype.setColindex = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.tictactoe.GameRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.tictactoe.GameRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.tictactoe.GameRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.tictactoe.GameRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            requesttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
            gameid: jspb.Message.getFieldWithDefault(msg, 2, ""),
            rowindex: jspb.Message.getFieldWithDefault(msg, 3, 0),
            colindex: jspb.Message.getFieldWithDefault(msg, 4, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.GameRequest}
 */
proto.tictactoe.GameRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tictactoe.GameRequest;
    return proto.tictactoe.GameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.GameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.GameRequest}
 */
proto.tictactoe.GameRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setRequesttype(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setGameid(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setRowindex(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setColindex(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.GameRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.tictactoe.GameRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.GameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.GameRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getRequesttype();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getGameid();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getRowindex();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
    f = message.getColindex();
    if (f !== 0) {
        writer.writeInt32(
            4,
            f
        );
    }
};


/**
 * optional int32 requestType = 1;
 * @return {number}
 */
proto.tictactoe.GameRequest.prototype.getRequesttype = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.GameRequest} returns this
 */
proto.tictactoe.GameRequest.prototype.setRequesttype = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string gameId = 2;
 * @return {string}
 */
proto.tictactoe.GameRequest.prototype.getGameid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.GameRequest} returns this
 */
proto.tictactoe.GameRequest.prototype.setGameid = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 rowIndex = 3;
 * @return {number}
 */
proto.tictactoe.GameRequest.prototype.getRowindex = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.GameRequest} returns this
 */
proto.tictactoe.GameRequest.prototype.setRowindex = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 colIndex = 4;
 * @return {number}
 */
proto.tictactoe.GameRequest.prototype.getColindex = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.GameRequest} returns this
 */
proto.tictactoe.GameRequest.prototype.setColindex = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.tictactoe);
