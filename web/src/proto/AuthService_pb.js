// source: AuthService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function () {
    return this || window || global || self || Function('return this')();
}).call(null);

goog.exportSymbol('proto.tictactoe.CreateTempUserRequest', null, global);
goog.exportSymbol('proto.tictactoe.CreateTempUserResponse', null, global);
goog.exportSymbol('proto.tictactoe.TokenModel', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.TokenModel = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.TokenModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.tictactoe.TokenModel.displayName = 'proto.tictactoe.TokenModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.CreateTempUserRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.CreateTempUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.tictactoe.CreateTempUserRequest.displayName = 'proto.tictactoe.CreateTempUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.CreateTempUserResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.CreateTempUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.tictactoe.CreateTempUserResponse.displayName = 'proto.tictactoe.CreateTempUserResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.tictactoe.TokenModel.prototype.toObject = function (opt_includeInstance) {
        return proto.tictactoe.TokenModel.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.tictactoe.TokenModel} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.tictactoe.TokenModel.toObject = function (includeInstance, msg) {
        var f, obj = {
            token: jspb.Message.getFieldWithDefault(msg, 1, ""),
            expiredat: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.TokenModel}
 */
proto.tictactoe.TokenModel.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tictactoe.TokenModel;
    return proto.tictactoe.TokenModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.TokenModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.TokenModel}
 */
proto.tictactoe.TokenModel.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setToken(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setExpiredat(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.TokenModel.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.tictactoe.TokenModel.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.TokenModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.TokenModel.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getToken();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getExpiredat();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.tictactoe.TokenModel.prototype.getToken = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.TokenModel} returns this
 */
proto.tictactoe.TokenModel.prototype.setToken = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 expiredAt = 2;
 * @return {number}
 */
proto.tictactoe.TokenModel.prototype.getExpiredat = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.TokenModel} returns this
 */
proto.tictactoe.TokenModel.prototype.setExpiredat = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.tictactoe.CreateTempUserRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.tictactoe.CreateTempUserRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.tictactoe.CreateTempUserRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.tictactoe.CreateTempUserRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            username: jspb.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.CreateTempUserRequest}
 */
proto.tictactoe.CreateTempUserRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tictactoe.CreateTempUserRequest;
    return proto.tictactoe.CreateTempUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.CreateTempUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.CreateTempUserRequest}
 */
proto.tictactoe.CreateTempUserRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.CreateTempUserRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.tictactoe.CreateTempUserRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.CreateTempUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.CreateTempUserRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
};


/**
 * optional string userName = 1;
 * @return {string}
 */
proto.tictactoe.CreateTempUserRequest.prototype.getUsername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.CreateTempUserRequest} returns this
 */
proto.tictactoe.CreateTempUserRequest.prototype.setUsername = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.tictactoe.CreateTempUserResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.tictactoe.CreateTempUserResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.tictactoe.CreateTempUserResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.tictactoe.CreateTempUserResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
            username: jspb.Message.getFieldWithDefault(msg, 2, ""),
            userstatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
            token: (f = msg.getToken()) && proto.tictactoe.TokenModel.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.CreateTempUserResponse}
 */
proto.tictactoe.CreateTempUserResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.tictactoe.CreateTempUserResponse;
    return proto.tictactoe.CreateTempUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.CreateTempUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.CreateTempUserResponse}
 */
proto.tictactoe.CreateTempUserResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUserid(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setUserstatus(value);
                break;
            case 4:
                var value = new proto.tictactoe.TokenModel;
                reader.readMessage(value, proto.tictactoe.TokenModel.deserializeBinaryFromReader);
                msg.setToken(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.CreateTempUserResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.tictactoe.CreateTempUserResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.CreateTempUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.CreateTempUserResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUserid();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getUserstatus();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
    f = message.getToken();
    if (f != null) {
        writer.writeMessage(
            4,
            f,
            proto.tictactoe.TokenModel.serializeBinaryToWriter
        );
    }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.tictactoe.CreateTempUserResponse.prototype.getUserid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.CreateTempUserResponse} returns this
 */
proto.tictactoe.CreateTempUserResponse.prototype.setUserid = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userName = 2;
 * @return {string}
 */
proto.tictactoe.CreateTempUserResponse.prototype.getUsername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tictactoe.CreateTempUserResponse} returns this
 */
proto.tictactoe.CreateTempUserResponse.prototype.setUsername = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 userStatus = 3;
 * @return {number}
 */
proto.tictactoe.CreateTempUserResponse.prototype.getUserstatus = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tictactoe.CreateTempUserResponse} returns this
 */
proto.tictactoe.CreateTempUserResponse.prototype.setUserstatus = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional TokenModel token = 4;
 * @return {?proto.tictactoe.TokenModel}
 */
proto.tictactoe.CreateTempUserResponse.prototype.getToken = function () {
    return /** @type{?proto.tictactoe.TokenModel} */ (
        jspb.Message.getWrapperField(this, proto.tictactoe.TokenModel, 4));
};


/**
 * @param {?proto.tictactoe.TokenModel|undefined} value
 * @return {!proto.tictactoe.CreateTempUserResponse} returns this
 */
proto.tictactoe.CreateTempUserResponse.prototype.setToken = function (value) {
    return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tictactoe.CreateTempUserResponse} returns this
 */
proto.tictactoe.CreateTempUserResponse.prototype.clearToken = function () {
    return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tictactoe.CreateTempUserResponse.prototype.hasToken = function () {
    return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.tictactoe);
